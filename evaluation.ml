(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end;;

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let rec lookup (env : env) (varname : varid) : value =
      match env with
      | [] -> raise (EvalError ("Variable not found"))
      | (vid, value)::tl -> if vid = varname then !value else lookup tl varname 

    let rec extend (env : env) (varname : varid) (loc : value ref) : env =
      match env with 
      | (vid, value) :: tl -> if vid = varname then (vid, loc) :: tl
                              else (vid, value) :: (extend tl varname loc)
      | [] -> [(varname, loc)]
    let rec env_to_string (env : env) : string =
      let val_to_string (v: value) : string =
        (match v with 
        | Val exp -> "Val: " ^ (exp_to_concrete_string exp)
        | _ -> raise (EvalError "Not a value"))
      in
      (match env with
      | (vid, value) :: tl -> vid ^ " = " ^ (val_to_string !value) ^ ": " ^
          (env_to_string tl)
      | [] -> "")

    let value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with 
      | Val exp -> "Val: " ^ (exp_to_concrete_string exp)
      | Closure (exp, env) -> if printenvp then "Environment: " ^ 
                                  (env_to_string env) ^ "; Val: " ^
                                  (exp_to_concrete_string exp)
                              else "Val: " ^ (exp_to_concrete_string exp)

  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)

(* SUBSTITUTION MODEL helper functions: evaluating unops and binops; returning value of Env.Val *)

let binop_eval (b : binop) (Env.Val e1 : Env.value) (Env.Val e2 : Env.value) : Env.value = 
  match b, e1, e2 with
  | Plus, Num x1, Num x2 -> Env.Val (Num (x1 + x2))
  | Plus, _, _ -> raise (EvalError "Plus args must be integers")
  | Minus, Num x1, Num x2 -> Env.Val (Num (x1 - x2))
  | Minus, _, _ ->  raise (EvalError "Minus args must be integers")
  | Times, Num x1, Num x2 -> Env.Val (Num (x1 * x2))
  | Times, _, _ -> raise (EvalError "Times args must be integers")
  | Equals, Num x1, Num x2 -> Env.Val (Bool (x1 = x2))
  | Equals, Bool x1, Bool x2 -> Env.Val (Bool (x1 = x2))
  | Equals, _, _ -> raise (EvalError "Equals args must be integers or booleans")
  | LessThan, Num x1, Num x2 -> Env.Val (Bool (x1 < x2))
  | LessThan, _, _ -> raise (EvalError "LessThan args must be integers")
;; 

let unop_eval (u : unop) (Env.Val e : Env.value) : Env.value =
  match u, e with
  | Negate, Num x -> Env.Val (Num (~- x))
  | Negate, _ -> raise (EvalError "Negate arg must be an integer value") 
;;

let value_to_expr (Env.Val v : Env.value) : expr = v;;

(* Subsitution Model Evaluator *)
let eval_s (e : expr) (_env : Env.env) : Env.value =
  let rec eval_s (e : expr) : Env.value =
    match e with
    | Var v -> raise (EvalError (v ^ ": unbound variable"))                    
    | Num _ | Bool _ | Fun _ | Unassigned -> Env.Val e                                                
    | Unop (u, e) -> unop_eval u (eval_s e)                
    | Binop (b, e1, e2) -> binop_eval b (eval_s e1) (eval_s e2)  
    | Conditional (e1, e2, e3) -> (match eval_s e1 with 
                                  | Env.Val x -> (match x with 
                                                 | Bool b -> if b then eval_s e2 
                                                             else eval_s e3
                                                 | _ -> raise (EvalError "Conditional requires boolean arg"))
                                  | _ -> raise (EvalError "Conditional requires boolean value"))
    | Let (v, def, body) -> eval_s (subst v (value_to_expr (eval_s def)) body)        
    | Letrec (v, def, body) -> eval_s (subst v (subst v (Letrec (v, def, Var v)) def) body)            
    | App (f, arg) -> (match eval_s f with 
                      | Env.Val Fun (v, e) -> eval_s (subst v (value_to_expr (eval_s arg)) e)
                      | _ -> raise (EvalError "Can't apply a nonfunction"))
    | Raise -> raise EvalException
  in eval_s e
;; 
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let rec eval_d (e : expr) (env : Env.env) : Env.value =
  match e with 
  | Var v -> Env.lookup env v
  | Num _ | Bool _ | Fun _ -> Env.Val e
  | Unop (u, exp) -> unop_eval u (eval_d exp env)
  | Binop (b, e1, e2) -> binop_eval b (eval_d e1 env) (eval_d e2 env)
  | Conditional (e1, e2, e3) -> (match eval_d e1 env with 
                                | Env.Val x -> (match x with 
                                                | Bool b -> if b then eval_d e2 env
                                                            else eval_d e3 env
                                                | _ -> raise (EvalError "Conditional requires boolean arg"))
                                | _ -> raise (EvalError "Conditional requires boolean value"))
  | Let (v, e1, e2) -> eval_d e2 (Env.extend env v (ref (eval_d e1 env)))
  | Letrec (v, e1, e2) -> let env1 = Env.extend env v (ref (Env.Val (Unassigned))) in
                          let def = eval_d e1 env1 in
                          let env2 = Env.extend env1 v (ref def) in
                          eval_d e2 env2
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError ("Variable not assigned"))
  | App (f, arg) -> match eval_d f env with 
                    | Env.Val func -> (match func with 
                                      | Fun (x, b) -> eval_d b (Env.extend env x (ref (eval_d arg env)))
                                      | _ -> raise (EvalError "Can't apply App to a non-function arg 1"))
                    | _ -> raise (EvalError "Non value returned.") 
                  
;;


       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let rec eval_l (e : expr) (env : Env.env) : Env.value =
  match e with 
  | Var v -> Env.lookup env v (* lookup raises error *)
  | Num _ | Bool _ -> Env.Val e
  | Fun _ -> Env.close e env
  | Unop (u, exp) -> unop_eval u (eval_l exp env)
  | Binop (b, e1, e2) -> binop_eval b (eval_l e1 env) (eval_l e2 env)
  | Conditional (e1, e2, e3) -> (match eval_l e1 env with 
                                | Env.Val x -> (match x with 
                                                | Bool b -> if b then eval_l e2 env
                                                            else eval_l e3 env
                                                | _ -> raise (EvalError "Conditional requires boolean arg"))
                                | _ -> raise (EvalError "Conditional requires boolean value"))
  | Let (v, e1, e2) -> eval_l e2 (Env.extend env v (ref (eval_d e1 env)))
  | Letrec (v, e1, e2) -> let env1 = Env.extend env v (ref (Env.Val (Unassigned))) in
                          let def = eval_l e1 env1 in
                          let env2 = Env.extend env1 v (ref def) in
                          eval_l e2 env2
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError ("Variable not assigned"))
  | App (f, arg) -> match eval_d f env with 
                    | Env.Val func -> (match func with 
                                      | Fun (x, b) -> eval_d b (Env.extend env x (ref (eval_d arg env)))
                                      | _ -> raise (EvalError "Can't apply App to a non-function arg 1"))
                    | _ -> raise (EvalError "Non value returned.") 
                  
;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_d ;;
